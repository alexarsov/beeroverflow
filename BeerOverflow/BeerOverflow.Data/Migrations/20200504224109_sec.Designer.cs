// <auto-generated />
using System;
using BeerOverflow.Data.DataAccessContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeerOverflow.Data.Migrations
{
    [DbContext(typeof(BeerOverflowContext))]
    [Migration("20200504224109_sec")]
    partial class sec
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeerOverflow.Data.Entities.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ABV")
                        .HasColumnType("float");

                    b.Property<Guid>("BreweryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<Guid>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StyleId");

                    b.ToTable("Beers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e23347c0-3a21-4f50-9d5c-c46253ee0715"),
                            ABV = 5.2000000000000002,
                            BreweryId = new Guid("1aee9ea3-390a-4582-ac37-7a6020ec1553"),
                            CountryId = new Guid("0bab8f8f-0400-4573-9ddc-35850d47cb94"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(953),
                            IsDeleted = false,
                            Name = "Heineken",
                            StyleId = new Guid("0db937ea-3513-4ce7-b3f6-80ae7474bef2")
                        },
                        new
                        {
                            Id = new Guid("6f6bd8b0-a68e-4409-bcda-15dbe334a26d"),
                            ABV = 4.7999999999999998,
                            BreweryId = new Guid("66dae4ad-753d-4170-90a7-5d58756b757f"),
                            CountryId = new Guid("0bab8f8f-0400-4573-9ddc-35850d47cb94"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1095),
                            IsDeleted = false,
                            Name = "Tuborg",
                            StyleId = new Guid("0e679a3c-5555-4a27-b0fa-594fba01ed68")
                        },
                        new
                        {
                            Id = new Guid("3efd593f-c900-4b05-80dc-e580a07bb7d2"),
                            ABV = 4.2999999999999998,
                            BreweryId = new Guid("52547555-abb7-425a-9818-7eadf0d90e8b"),
                            CountryId = new Guid("29473585-5e82-4cfc-844e-0c371a6690d6"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1112),
                            IsDeleted = false,
                            Name = "Omnipollo Selassie",
                            StyleId = new Guid("20d79115-03e0-4123-8994-b0f2ceb45ca8")
                        },
                        new
                        {
                            Id = new Guid("bdbfa744-0f6c-4fd2-99cf-8867fb4b4b92"),
                            ABV = 7.7999999999999998,
                            BreweryId = new Guid("4a3757a9-41bc-4f3c-a5b4-7765aa38fac4"),
                            CountryId = new Guid("7d4928db-2eb4-4cb9-9372-2a8cb8871615"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1124),
                            IsDeleted = false,
                            Name = "King Henry",
                            StyleId = new Guid("953d28bf-c7f4-4824-ada9-b67d4256c28c")
                        },
                        new
                        {
                            Id = new Guid("1f6a31a3-b955-4190-b961-bd2b105e5103"),
                            ABV = 5.5,
                            BreweryId = new Guid("551e3fa1-4d24-420d-8058-d3dd4118f500"),
                            CountryId = new Guid("917bf455-9b03-41f3-923b-65b65983f916"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1136),
                            IsDeleted = false,
                            Name = "Hardcore Mælk",
                            StyleId = new Guid("44fdbf01-64b7-4869-ba2f-84290f10bc1f")
                        },
                        new
                        {
                            Id = new Guid("6b99474b-00bd-42ed-8a46-48dc16f94ff8"),
                            ABV = 6.5999999999999996,
                            BreweryId = new Guid("e77ba42b-d8b0-41d9-ba13-98cba75ce8bc"),
                            CountryId = new Guid("940ce711-c272-46bd-9aa4-9cf64cfd7d3a"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1149),
                            IsDeleted = false,
                            Name = "Bière de Garde",
                            StyleId = new Guid("4ae1546e-9cc2-4f52-88f8-86077ae4bd36")
                        },
                        new
                        {
                            Id = new Guid("55742482-9d52-4272-92b6-60b5c417b924"),
                            ABV = 5.5999999999999996,
                            BreweryId = new Guid("18112ada-2fc5-41e1-8917-6ebfd4c4a0b7"),
                            CountryId = new Guid("217193b7-0dc9-4ffa-a161-9cba9c8fbccb"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1161),
                            IsDeleted = false,
                            Name = "Rye Beer",
                            StyleId = new Guid("32bd8b79-eac4-456c-b87d-0bed55087031")
                        },
                        new
                        {
                            Id = new Guid("72bb2fe8-9b56-4bef-8941-e986b806ce98"),
                            ABV = 12.6,
                            BreweryId = new Guid("16e01b0a-827e-45af-bcc8-ccf753f4d462"),
                            CountryId = new Guid("70a47634-234c-4105-b464-9cf3d7043b44"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1173),
                            IsDeleted = false,
                            Name = "Inverno",
                            StyleId = new Guid("e589fadb-0cda-4397-9301-f14e0fb7832b")
                        },
                        new
                        {
                            Id = new Guid("db092ea6-2f6e-4c14-96f2-29cff514029b"),
                            ABV = 7.0999999999999996,
                            BreweryId = new Guid("f5da3b48-59d6-46d9-b407-5f7d376285e2"),
                            CountryId = new Guid("177cb837-9acd-4adc-85e7-983156b77189"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 633, DateTimeKind.Utc).AddTicks(1183),
                            IsDeleted = false,
                            Name = "Quiet Riot",
                            StyleId = new Guid("72e7e09e-2640-4db2-910a-84c1401f4c26")
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Breweries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1aee9ea3-390a-4582-ac37-7a6020ec1553"),
                            CountryId = new Guid("0bab8f8f-0400-4573-9ddc-35850d47cb94"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7435),
                            IsDeleted = false,
                            Name = "Zagorka AD"
                        },
                        new
                        {
                            Id = new Guid("66dae4ad-753d-4170-90a7-5d58756b757f"),
                            CountryId = new Guid("0e03d656-60cc-476b-9c4a-e12d771dbd62"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7564),
                            IsDeleted = false,
                            Name = "Karlsberg"
                        },
                        new
                        {
                            Id = new Guid("52547555-abb7-425a-9818-7eadf0d90e8b"),
                            CountryId = new Guid("29473585-5e82-4cfc-844e-0c371a6690d6"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7576),
                            IsDeleted = false,
                            Name = "Klackabacken"
                        },
                        new
                        {
                            Id = new Guid("4a3757a9-41bc-4f3c-a5b4-7765aa38fac4"),
                            CountryId = new Guid("7d4928db-2eb4-4cb9-9372-2a8cb8871615"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7584),
                            IsDeleted = false,
                            Name = "Mad Squirrel"
                        },
                        new
                        {
                            Id = new Guid("551e3fa1-4d24-420d-8058-d3dd4118f500"),
                            CountryId = new Guid("917bf455-9b03-41f3-923b-65b65983f916"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7592),
                            IsDeleted = false,
                            Name = "Klanbarrique"
                        },
                        new
                        {
                            Id = new Guid("e77ba42b-d8b0-41d9-ba13-98cba75ce8bc"),
                            CountryId = new Guid("940ce711-c272-46bd-9aa4-9cf64cfd7d3a"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7600),
                            IsDeleted = false,
                            Name = "Le Père Jules"
                        },
                        new
                        {
                            Id = new Guid("18112ada-2fc5-41e1-8917-6ebfd4c4a0b7"),
                            CountryId = new Guid("217193b7-0dc9-4ffa-a161-9cba9c8fbccb"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7607),
                            IsDeleted = false,
                            Name = "CoolHead Brew"
                        },
                        new
                        {
                            Id = new Guid("16e01b0a-827e-45af-bcc8-ccf753f4d462"),
                            CountryId = new Guid("70a47634-234c-4105-b464-9cf3d7043b44"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7614),
                            IsDeleted = false,
                            Name = "Masis Brewery"
                        },
                        new
                        {
                            Id = new Guid("f5da3b48-59d6-46d9-b407-5f7d376285e2"),
                            CountryId = new Guid("177cb837-9acd-4adc-85e7-983156b77189"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 631, DateTimeKind.Utc).AddTicks(7622),
                            IsDeleted = false,
                            Name = "Maistila"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("CommentUserId", "CommentReviewId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bab8f8f-0400-4573-9ddc-35850d47cb94"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(98),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("0e03d656-60cc-476b-9c4a-e12d771dbd62"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1416),
                            IsDeleted = false,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("29473585-5e82-4cfc-844e-0c371a6690d6"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1455),
                            IsDeleted = false,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("7d4928db-2eb4-4cb9-9372-2a8cb8871615"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1468),
                            IsDeleted = false,
                            Name = "England"
                        },
                        new
                        {
                            Id = new Guid("917bf455-9b03-41f3-923b-65b65983f916"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1477),
                            IsDeleted = false,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("940ce711-c272-46bd-9aa4-9cf64cfd7d3a"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1485),
                            IsDeleted = false,
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("217193b7-0dc9-4ffa-a161-9cba9c8fbccb"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1494),
                            IsDeleted = false,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("70a47634-234c-4105-b464-9cf3d7043b44"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1503),
                            IsDeleted = false,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("177cb837-9acd-4adc-85e7-983156b77189"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 629, DateTimeKind.Utc).AddTicks(1510),
                            IsDeleted = false,
                            Name = "Cuba"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("bit");

                    b.Property<bool?>("Like")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdde12b9-e61a-4748-a239-c7331b4fb6a8"),
                            ConcurrencyStamp = "c6790b11-9de0-4a98-bf97-ddba044e7183",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("43a08cc4-76ae-46d8-9e2c-cde7b0479146"),
                            ConcurrencyStamp = "db13bde7-6ba5-4d88-9524-20aac5332cbb",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Style", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0db937ea-3513-4ce7-b3f6-80ae7474bef2"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1263),
                            IsDeleted = false,
                            Name = "Premium Light"
                        },
                        new
                        {
                            Id = new Guid("0e679a3c-5555-4a27-b0fa-594fba01ed68"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1366),
                            IsDeleted = false,
                            Name = "Green"
                        },
                        new
                        {
                            Id = new Guid("20d79115-03e0-4123-8994-b0f2ceb45ca8"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1381),
                            IsDeleted = false,
                            Name = "Lager"
                        },
                        new
                        {
                            Id = new Guid("953d28bf-c7f4-4824-ada9-b67d4256c28c"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1388),
                            IsDeleted = false,
                            Name = "Traditional Ale"
                        },
                        new
                        {
                            Id = new Guid("44fdbf01-64b7-4869-ba2f-84290f10bc1f"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1394),
                            IsDeleted = false,
                            Name = "Lager - Dark"
                        },
                        new
                        {
                            Id = new Guid("4ae1546e-9cc2-4f52-88f8-86077ae4bd36"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1401),
                            IsDeleted = false,
                            Name = "Winter Warmer"
                        },
                        new
                        {
                            Id = new Guid("32bd8b79-eac4-456c-b87d-0bed55087031"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1407),
                            IsDeleted = false,
                            Name = "Lager - Euro Dark"
                        },
                        new
                        {
                            Id = new Guid("e589fadb-0cda-4397-9301-f14e0fb7832b"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1414),
                            IsDeleted = false,
                            Name = "Old Ale"
                        },
                        new
                        {
                            Id = new Guid("72e7e09e-2640-4db2-910a-84c1401f4c26"),
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 632, DateTimeKind.Utc).AddTicks(1422),
                            IsDeleted = false,
                            Name = "Porter - Baltic"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aea4f481-df4b-4272-9d12-022293d98e48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efa1be26-1603-461f-b6e0-065bbfbcb344",
                            CreatedOn = new DateTime(2020, 5, 4, 22, 41, 7, 634, DateTimeKind.Utc).AddTicks(8798),
                            DeletedOn = new DateTime(2020, 5, 4, 22, 41, 7, 634, DateTimeKind.Utc).AddTicks(1390),
                            Email = "stacktrace@bo.net",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(2020, 5, 4, 22, 41, 7, 634, DateTimeKind.Utc).AddTicks(1245),
                            NormalizedEmail = "STACKTRACE@BO.NET",
                            NormalizedUserName = "STACKTRACE@BO.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEJJzHWrZZ7vn/m8VbNOxX17DPYUkcHKiFfHv98OBqwIvpKkmCYg/O9P+K4ou+lkLXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "stacktrace@bo.net"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.UserDrankBeer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("DrankLists");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.UserWishBeer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("UpVote")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.HasIndex("CommentUserId", "CommentReviewId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aea4f481-df4b-4272-9d12-022293d98e48"),
                            RoleId = new Guid("cdde12b9-e61a-4748-a239-c7331b4fb6a8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Ban", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("BeersList")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.Style", "Style")
                        .WithMany("BeerLists")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("BreweriesList")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Comment", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.Comment", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentUserId", "CommentReviewId");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("ReviewList")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("ReviewList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.UserDrankBeer", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("UserDrankBeers")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("UserDrankBeers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.UserWishBeer", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("UserWishBeers")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("UserWishBeers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Vote", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Review", "Review")
                        .WithMany("Votes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.Comment", null)
                        .WithMany("Votes")
                        .HasForeignKey("CommentUserId", "CommentReviewId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

using BeerOverflow.Data.DataAccessContext;
using BeerOverflow.Services.Contracts;
using BeerOverflow.Services.Mappers;
using Microsoft.EntityFrameworkCore;
using BeerOverflow.Data.Entities;
using BeerOverflow.Services.DTOs;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System;

namespace BeerOverflow.Services.Services.Help_Services
{
    public class DrankListService : IDrankListService
    {
        private readonly BeerOverflowContext context;
        public DrankListService(BeerOverflowContext context)
        {
            this.context = context;
        }
        public async Task<bool> AddBeerToDrankListAsync(Guid beerId, Guid userId)
        {
            var drankList = await context.DrankLists
                .FirstOrDefaultAsync(x => x.BeerId == beerId && x.UserId == userId);
            if (drankList == null)
            {
                drankList = new UserDrankBeer
                {
                    Id = Guid.NewGuid(),//TODO: does not get generated by db?
                    BeerId = beerId,
                    UserId = userId,
                };
                _ = await context.DrankLists.AddAsync(drankList);
                _ = await context.SaveChangesAsync();
            }
            return true;
        }
        public async Task<ICollection<BeerDTO>> GetUserDrankListAsync(Guid userId)
        {
            var DrankList = await context.DrankLists
               .Include(dl => dl.Beer).ThenInclude(b => b.Brewery)
               .Include(dl => dl.Beer).ThenInclude(b => b.Country)
               .Include(dl => dl.Beer).ThenInclude(b => b.Style)
               .Where(dl => dl.UserId == userId && dl.Beer.IsDeleted == false)
               .ToListAsync();
            return DrankList.Select(dl => dl.Beer.ToDTO()).ToList();
        }
        public async Task<bool> RemoveBeerFromDrankListAsync(Guid beerId, Guid userId)
        {
            var drankList = await context.DrankLists
                 .FirstOrDefaultAsync(dl => dl.BeerId == beerId && dl.UserId == userId);

            if (drankList != null)
            {
                drankList.IsDeleted = true;
            }
            _ = await context.SaveChangesAsync();
            return true;
        }
        public async Task<ICollection<UserDrankBeer>> GetDrankListAsync(Guid userId)
        {
            return await context.DrankLists.Where(x => x.UserId == userId).ToArrayAsync();
        }
        public async Task<bool> RemoveUserDrankListAsync(Guid userId)
        {
            var drankList = (await GetDrankListAsync(userId)).ToArray();
            for (int i = 0; i < drankList.Length; i++)
            {
                drankList[i].IsDeleted = true;
            }
            _ = await context.SaveChangesAsync();
            return true;
        }
    }
}

using BeerOverflow.Data.DataAccessContext;
using BeerOverflow.Services.Contracts;
using BeerOverflow.Services.Mappers;
using Microsoft.EntityFrameworkCore;
using BeerOverflow.Data.Entities;
using BeerOverflow.Services.DTOs;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System;

namespace BeerOverflow.Services.Services.Help_Services
{
    public class WishListService : IWishListService
    {
        private readonly BeerOverflowContext context;
        public WishListService(BeerOverflowContext context)
        {
            this.context = context;
        }
        public async Task<bool> AddBeerToWishListAsync(Guid beerId, Guid userId)
        {
            var wishList = await context.WishLists
                .FirstOrDefaultAsync(x => x.BeerId == beerId && x.UserId == userId);
            if (wishList == null)
            {
                wishList = new UserWishBeer
                {
                    Id = Guid.NewGuid(),//TODO: does not get generated by db?
                    BeerId = beerId,
                    UserId = userId,
                };
                _ = await context.WishLists.AddAsync(wishList);
                _ = await context.SaveChangesAsync();
            }
            return true;
        }
        
        public async Task<bool> RemoveUserWishListAsync(Guid userId)
        {
            var wishList = (await GetWishListAsync(userId)).ToArray();
            for (int i = 0; i < wishList.Length; i++)
            {
                wishList[i].IsDeleted = true;
            }
            _ = await context.SaveChangesAsync();
            return true;
        }
        public async Task<ICollection<BeerDTO>> GetUserWishListAsync(Guid userId)
        {
            var wishList = await context.WishLists
               .Include(wl => wl.Beer).ThenInclude(b =>b.Brewery)
               .Include(wl => wl.Beer).ThenInclude(b =>b.Country)
               .Include(wl => wl.Beer).ThenInclude(b =>b.Style)
               .Where(wl => wl.UserId == userId && wl.Beer.IsDeleted == false)
               .ToListAsync();
            return wishList.Select(wl => wl.Beer.ToDTO()).ToList();
        }
        public async Task<bool> RemoveBeerFromWishListAsync(Guid beerId, Guid userId)
        {
            var wishList = await context.WishLists
                .FirstOrDefaultAsync(wl => wl.BeerId == beerId && wl.UserId == userId);

            if (wishList != null)
            {
                wishList.IsDeleted = true;
            }
            _ = await context.SaveChangesAsync();
            return true;
        }
        private async Task<ICollection<UserWishBeer>> GetWishListAsync(Guid userId)
        {
            return await context.WishLists.Where(x => x.UserId == userId).ToArrayAsync();
        }
    }
}
